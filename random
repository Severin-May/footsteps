import paho.mqtt.client as mqtt
import json
from datetime import datetime
from db_storer import sensor_Data_Handler
import time
import threading
import matplotlib.pyplot as plt
from footstep_calculate import calculate_steps, fetch_new_data, update_plot, DB_NAME, SMOOTHING_WINDOW, PEAK_HEIGHT, PEAK_DISTANCE
import pandas as pd

# Global variables
last_processed_timestamp = None
data_buffer = pd.DataFrame()
step_count = 0
peaks = []

def mqtt_listen():
    global last_processed_timestamp, data_buffer, step_count, peaks

    MQTT_Broker = "test.mosquitto.org"
    MQTT_Port = 1883
    Keep_Alive_Interval = 45
    MQTT_Topic = "ayush/accelerometer/data"

    def on_connect(mosq, obj, flags, rc):
        print("Connected to MQTT Broker with result code " + str(rc))
        mqttc.subscribe(MQTT_Topic, 0)

    def on_message(mosq, obj, msg):
        print("MQTT Data Received...")
        print("MQTT Topic: " + msg.topic)
        json_data = json.loads(msg.payload.decode('utf-8'))
        print("Data: " + str(json_data))

        if 'timestamp' not in json_data:
            json_data['timestamp'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

        sensor_Data_Handler(msg.topic, json.dumps(json_data))

    def on_subscribe(mosq, obj, mid, granted_qos):
        print(f"Subscribed to topic: {MQTT_Topic} with QoS {granted_qos}")

    mqttc = mqtt.Client()

    mqttc.on_message = on_message
    mqttc.on_connect = on_connect
    mqttc.on_subscribe = on_subscribe

    mqttc.connect(MQTT_Broker, int(MQTT_Port), int(Keep_Alive_Interval))

    mqttc.loop_start()

    if __name__ == "__main__": # Move the main loop inside the if __name__ == "__main__": block
        plt.ion()  # Enable interactive plotting

        def plot_thread_function():
            while True:
                if not data_buffer.empty:
                    update_plot(data_buffer.copy(), peaks, step_count)  # Pass a copy to avoid race conditions
                time.sleep(1)  # Update plot every second

        plot_thread = threading.Thread(target=plot_thread_function)
        plot_thread.daemon = True
        plot_thread.start()

        try:
            while True:
                new_data_df = fetch_new_data(last_processed_timestamp)
                if not new_data_df.empty:
                    data_buffer = pd.concat([data_buffer, new_data_df])
                    step_count, peaks = calculate_steps(data_buffer.copy(), PEAK_HEIGHT, PEAK_DISTANCE, SMOOTHING_WINDOW)  # Calculate on a copy
                    last_processed_timestamp = new_data_df['timestamp'].iloc[-1]
                    print(f"Calculated step count: {step_count}, New data points: {len(new_data_df)}")
                else:
                    print("No new data.")
                time.sleep(5)  # Check for new data every 5 seconds
        except KeyboardInterrupt:
            print("Disconnected from MQTT Broker.")
            mqttc.loop_stop()

if __name__ == "__main__":
    mqtt_listen()